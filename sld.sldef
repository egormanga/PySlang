# .sld syntax definition


code: (((Slang.import ';') | classdef | Slang.comment) \n+)*

classdef: 'class' identifier ('<' identifier)* block

identifier: Slang.identifier

block: '{' \n* ((Slang.comment | (definition ';')) \n*)* \n* '}'

definition: typename | castable | iterable | operator | methoddef | fielddef

typename: 'typename' identifier ('[' Slang.integer? ']')?

castable: 'castable' 'to' identifier

iterable: 'iterable' type

type: identifier ('[' Slang.integer ']')?

preop: Slang.unop
binop: Slang.binop type
postop: binop | Slang.unpostop | itemget | funccall
operator: typeref (preop 'operator' | 'operator' postop)

typeref: (Slang.decimal '.')? type

itemget: '[' type ']' # TODO: slices

funccall: '(' (argdef (',' argdef)*)? ')'

argdef: '*' type | '/' | '*' | type identifier? ('[' integer ']' | '**' | '?' | '+' | '*' | '=' Slang.literal)?

methoddef: typeref identifier funccall

fielddef: typeref identifier (',' identifier)*


:linecomment: Slang.linecomment

:whitespace: ' ' | \t | \r | \v | \f

:continuation: \\


# by Sdore, 2021-24
#  slang.sdore.me
