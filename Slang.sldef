# Slang syntax definition


## Abstract

code: (statement comment? (\n | ';') \n*)*

classcode: (classstatement comment? (\n | ';') \n*)*

classdefcode: (classdefstatement comment? \n+)*

block: '{' \n* code \n* '}' | ':' statement (';' statement)* ';'?

classblock: '{' \n* classcode \n* '}' | ':' classstatement (';' classstatement)* ';'?

classdefblock: '{' \n* classdefcode \n* '}'


## Primitive

binopexpr: expr binop expr

unpreopexpr: unop expr
unpostopexpr: expr unpostop
unopexpr: unpreopexpr | unpostopexpr

value: binopexpr | unopexpr | itemget | funccall | varname | lambda | literal
expr: value | '(' expr ')'
 # e.g.: `f(x+3)` is an instance of `expr`, also `f`, `x+3` and `x` are `expr`s too.


## Non-final

type: modifier* identifier

modifier: 'const' | 'static' | 'volatile'
 # `const` — immutable/constant variable

vardefassignment: identifier ('=' expr | funccallargs)?

argdef: '/' | '*' | type? identifier ('[' integer ']' | '?' | '+' | '*' | '**' | '=' expr)?
 # `, /,` — end of positional-only arguments
 # `, *,` — start of keyword-only arguments
 # in the order of positional argument capturing precedence:
 # `arg[n]` — packs a tuple of `n` values from positional arguments
 # `arg?` — optional argument (start capturing only after all required arguments are fulfilled)
 # `arg+` — packs a tuple with at least one value from leftover positionals (incompatible with `arg*`)
 # `arg*` — packs a tuple with any number of values from leftover positionals (incompatible with `arg+`)
 # `arg**` — packs a dict with all leftover keyword arguments
 # `arg=val` — optional argument with a default value

classargdef: type? classvarname ('?' | '+' | '*' | '**' | '=' expr)?

lambda: '(' (argdef (',' argdef)*)? ')' '->' type (block | '=' expr)

callarg: '*'? expr
callargs: callarg (',' callarg)*

callkwarg: identifier ('=' | ':') expr | '**' expr
callkwargs: callkwarg (',' callkwarg)*

itemget: expr '[' expr ']' # TODO: slices

attrselfop: '@.' | '@' | '.' | ':'
attrop: '->' | attrselfop
attrget: expr attrop identifier

classattrget: (attrselfop | expr attrop) identifier


## Final

statement: comment |
           reserved |
           funcdef |
           keywordexpr |
           classdef |
           conditional |
           forloop |
           whileloop |
           vardef |
           assignment |
           funccall |
           keyworddef

classstatement: comment |
                reserved |
                funcdef |
                keywordexpr |
                conditional |
                forloop |
                whileloop |
                vardef |
                classassignment |
                funccall

classdefstatement: comment |
                   reserved |
                   classfuncdef |
                   classdef |
                   vardef |
                   classkeyworddef

funcdef: (type | 'def') identifier '(' (argdef (',' argdef)*)? ')' (block | '=' expr)

classfuncdef: (type | 'method') identifier '(' (argdef (',' argdef)*)? ')' (classblock | '=' expr)

keywordexpr: return | break | continue | fallthrough | import | delete | assert | super | breakpoint

classdef: 'class' identifier ('(' identifier (',' identifier)* ')')? classdefblock

conditional: 'if' expr block (\n* 'elif' expr block)* (\n* 'else' block)?

forloop: 'for' identifier 'in' expr block (\n* 'else' block)?

whileloop: 'while' expr block (\n* 'else' block)?

vardef: type vardefassignment (',' vardefassignment)*

assignment: varname (',' varname)* [binop? '='] expr

classassignment: classvarname (',' classvarname)* [binop? '='] expr

funccallargs: '(' (callargs (',' callkwargs)? | callkwargs)? ')'
funccall: expr funccallargs

keyworddef: defkeyword block

classkeyworddef: classdefkeyword ('(' (classargdef (',' classargdef)*)? ')')? (classblock | ';')


## Keywords

return: 'return' expr

break: 'break' number?

continue: 'continue' number?

fallthrough: 'fallthrough'

import: 'import' (identifier ':')? (identifier '/')* identifier (':' (identifier | '*'))?  # ns:path/to/package:names

delete: 'delete' varname

assert: 'assert' expr

super: 'super'

breakpoint: 'breakpoint'

defkeyword: 'main' | 'exit'

classdefkeyword: 'init' | 'destroy' | 'constr' | 'property' | 'repr' | 'eq' | 'ne' |
                 [('l' | 'g') ('t' | 'e')]

reserved: 'each' | 'foreach' | 'until' | 'do' | 'repeat' | 'begin' | 'end' |
          'try' | 'catch' | 'except' | 'finally' | 'raise' | 'throw' |
          'yield' | 'async' | 'await' | 'go' |
          'switch' | 'match' | 'case' | 'goto' | 'exit' |
          'with' | 'include' | 'using' | 'default' | 'final' |
          'public' | 'protected' | 'private' | 'internal' | 'override' | 'overrides' |
          'extends' | 'implements' | 'interface' | 'struct'


## Identifiers

identifier: /[^\W\d][\w]*/
 # non-empty sequence of alphanumeric characters plus the underscore (`_`), not starting with a digit character.

varname: attrget | identifier

classvarname: classattrget | identifier


## Literals

boolean: 'true' | 'false'

decimal: /[^\D0]\d*|0/
binary: /[0-1]+/
ternary: /[0-2]+/
octal: /[0-7]+/
hexadecimal: /[0-9A-Fa-f]+/
base36: /[0-9A-Za-z]+/

integer: decimal |
         ['0b' binary] |
         ['0t' ternary] |
         ['0o' octal] |
         ['0x' hexadecimal] |
         ['0a' base36]

number: [(decimal \')? integer ('.' ['0'* decimal])?]

char: /\\ (?:[\\'"abefnrtv] |
           N\{[0-9A-Z\ -]+\} |
           u[0-9A-Fa-f]{4} |
           U[0-9A-Fa-f]{8} |
           x[0-9A-Fa-f]{1,2} |
           [0-7]{1,3}) | [^\\'"]/

character: [\' (char | \") \']

string: ['f'? ('"' (char | \')* '"' | \' (char | \")* \')]

tuple: '(' type expr (',' type expr)* ')'

list: '[' type (':' expr (',' expr)*)? ']'

set: '{' expr (',' expr)* '}'

map: '{' expr ':' expr (',' expr ':' expr)* '}'

literal: boolean | number | character | string | tuple | list | set | map


## Operators

undchop: '++' | '--'
unchop: '!' | '+' | '-' | '~'
unkwop: 'not'
unmathop: 'floor' | 'ceil' | 'round' |
          ['i'? 'sqrt'] |
          ['exp' 'm1'?] |
          ('ln' | 'lb' | 'lg' | ['log' ('2' | '10' | '1p')]) |
          ['a'? (('sin' | 'cos' | ('tan' | 'tg') | ('cotan' | 'ctg')) 'h'? | 'tan2')]
unop: undchop | unchop | unkwop | unmathop

unchpostop: '!'
undchpostop: '++' | '--' | '**'
unpostop: undchpostop | unchpostop

bindchop: '==' | '**' | '//' | '<<' | '>>'
binchop: '%' | '&' | '*' | '+' | '-' | '/' | '<' | '>' | '^' | '|'
binkwop: 'is' | 'is not' | 'in' | 'not in' | 'isof' | 'and' | 'but' | 'xor' | 'or' | 'to'
binmathop: 'pow'
binop: bindchop | binchop | binkwop | binmathop


## Comments

blockcomment: [[\# '|'] /.+?(?=\|\#)/ ['|' \#]]
linecomment: [\# /(?!\|)[^\n]*/]
comment: blockcomment | linecomment


## Specials

:whitespace: ' ' | \t | \r | \v | \f

:continuation: \\

:special: '..' | ':=' | ',' | '?' | '=' | '(' | ')' | '{' | '}'

:replexpr: expr
 # expression evaluation (only in REPL)


# by Sdore, 2021-24
#  slang.sdore.me
